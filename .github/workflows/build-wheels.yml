name: Build Wheels

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }} (py${{ matrix.python-version }}, ${{ matrix.variant }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        variant: [cpu, cu118, cu121, cu124]
        exclude:
          # macOS: CPU-only
          - os: macos-latest
            variant: cu118
          - os: macos-latest
            variant: cu121
          - os: macos-latest
            variant: cu124
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: "4"

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Sanity check vendored Detectron2 sources
        run: |
          ls -la src/jatic_dota/_vendor/detectron2/detectron2/layers || true
          ls -la src/jatic_dota/_vendor/detectron2/detectron2/layers/csrc || true
          python - <<'PY'
          import os, sys
          p="src/jatic_dota/_vendor/detectron2/detectron2/layers/csrc"
          ok = os.path.isdir(p) and any(fn.endswith((".cpp",".cu")) for d,_,fs in os.walk(p) for fn in fs)
          sys.exit(0 if ok else 1)
          PY

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: macOS build flags
        if: runner.os == 'macOS'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "ARCHFLAGS=-arch arm64" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Set variant env
        run: |
          echo "JATIC_TORCH_VARIANT=${{ matrix.variant }}" >> $GITHUB_ENV
          if [ "${{ matrix.variant }}" = "cpu" ]; then
            echo "FORCE_CUDA=0" >> $GITHUB_ENV
          else
            echo "FORCE_CUDA=1" >> $GITHUB_ENV
            # reasonable arch list without exploding size/time
            echo "TORCH_CUDA_ARCH_LIST=7.5;8.0;8.6;8.9;9.0" >> $GITHUB_ENV
          fi

      # Linux CUDA toolkits for cu118/cu121/cu124
      - name: Install CUDA toolkit
        if: runner.os == 'Linux' && matrix.variant != 'cpu'
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: ${{ matrix.variant == 'cu118' && '11.8.0' || matrix.variant == 'cu121' && '12.1.1' || '12.4.1' }}

      - name: Install build deps + Torch (${{ matrix.variant }})
        run: |
          python -m pip install --upgrade pip
          pip install "setuptools>=68" wheel build ninja packaging
          case "${{ matrix.variant }}" in
            cpu)
              pip install torch==2.4.1 torchvision==0.19.1
              ;;
            cu118)
              pip install --index-url https://download.pytorch.org/whl/cu118 torch==2.4.1+cu118 torchvision==0.19.1+cu118
              ;;
            cu121)
              pip install --index-url https://download.pytorch.org/whl/cu121 torch==2.4.1+cu121 torchvision==0.19.1+cu121
              ;;
            cu124)
              pip install --index-url https://download.pytorch.org/whl/cu124 torch==2.4.1+cu124 torchvision==0.19.1+cu124
              ;;
          esac
          python -c "import torch, sys; print('torch', torch.__version__, 'cuda_is_available=', torch.cuda.is_available(), 'build', torch.version.cuda); sys.exit(0)"

      - name: Build wheel (non-isolated so Torch is visible)
        run: python -m build --wheel --no-isolation -v

      - name: Build sdist (single run)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && matrix.variant == 'cpu'
        run: python -m build --sdist --no-isolation -v

      - name: Smoke test install
        run: |
          WHEEL_FILE=$(ls dist/*.whl)
          # Reuse the Torch we already installed above; just install our wheel.
          pip install "$WHEEL_FILE"
          python -c "import jatic_dota; print('import ok')"
          python -c "from jatic_dota import inference; print('inference ok')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.variant }}
          path: dist/*.whl
          if-no-files-found: error

      - name: Upload sdist
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && matrix.variant == 'cpu'
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error