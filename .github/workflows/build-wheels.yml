name: Build Wheels (CPU only)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-wheels:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest }   # Linux → manylinux wheels
          - { os: macos-latest }    # macOS → native wheels

    env:
      # Build these CPython versions
      CIBW_BUILD: "cp310-* cp311-* cp312-*"
      CIBW_SKIP: "*-musllinux*"

      # Use pip as the frontend and disable build isolation so Torch from BEFORE_BUILD is visible
      CIBW_BUILD_FRONTEND: "pip"
      CIBW_ENVIRONMENT: "PIP_NO_BUILD_ISOLATION=0 FORCE_CUDA=0 JATIC_TORCH_VARIANT=cpu"

      # manylinux settings (default policy is manylinux_2_28)
      CIBW_ARCHS_LINUX: "x86_64"
      CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64"
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

      # macOS: arm64 runners by default; set deployment target if needed
      CIBW_ARCHS_MACOS: "arm64"
      CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.0"

      # Toolchain / verbosity
      CMAKE_BUILD_PARALLEL_LEVEL: "4"
      CIBW_BUILD_VERBOSITY: "1"

      # Install build deps + Torch **before** building (runs inside cibuildwheel's venv)
      CIBW_BEFORE_BUILD_LINUX: |
        python -m pip install -U pip wheel build ninja packaging
        pip install torch==2.4.1 torchvision==0.19.1 --index-url https://download.pytorch.org/whl/cpu
      CIBW_BEFORE_BUILD_MACOS: |
        python -m pip install -U pip wheel build ninja packaging
        pip install torch==2.4.1 torchvision==0.19.1 --index-url https://download.pytorch.org/whl/cpu

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up driver Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install -U cibuildwheel

      - name: Build wheels (manylinux on Linux, native on macOS)
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist (once on Linux)
        if: runner.os == 'Linux'
        run: |
          python -m pip install -U build
          # sdist may need torch too if your setup.py imports it; re-use same env
          python -m build --sdist --outdir wheelhouse

      - name: Smoke test one wheel
        shell: bash
        run: |
          whl=$(ls wheelhouse/*.whl | head -n1)
          python -m pip install "$whl"
          python - <<'PY'
          import importlib
          pkg = importlib.import_module("<your_top_level_package_name>")
          print("Import OK:", pkg.__name__)
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*
          if-no-files-found: error
